import os
import base64
from io import BytesIO
from PIL import Image
import streamlit as st
from openai import OpenAI

# -------------------- C·∫•u h√¨nh trang --------------------
st.set_page_config(page_title="Chat v·ªõi OpenAI", page_icon="üí¨", layout="centered")
st.title("üí¨ Chat v·ªõi OpenAI (DuyKh√°nh, Qu·ªëcHo√†ng, B√© H∆∞uNh√¢n)")
st.caption("H·ªó tr·ª£ vƒÉn b·∫£n + h√¨nh ·∫£nh ‚Ä¢ Model m·∫∑c ƒë·ªãnh: gpt-4o-mini")

# -------------------- API key --------------------
api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùå Thi·∫øu OPENAI_API_KEY. V√†o **Settings ‚Üí Secrets** c·ªßa Streamlit Cloud ƒë·ªÉ th√™m.")
    st.stop()

client = OpenAI(api_key=api_key)

# -------------------- Sidebar: c·∫•u h√¨nh --------------------
with st.sidebar:
    st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
    model = st.selectbox("Ch·ªçn model", ["gpt-4o-mini", "gpt-4o", "o4-mini"], index=0)
    temperature = st.slider("Nhi·ªát ƒë·ªô (Temperature)", 0.0, 1.0, 0.3, 0.1)
    max_tokens = st.slider("S·ªë token t·ªëi ƒëa", 64, 2048, 512, 64)
    st.caption("üí° Nhi·ªát ƒë·ªô th·∫•p ‚Üí tr·∫£ l·ªùi ·ªïn ƒë·ªãnh h∆°n")

# -------------------- Ti·ªán √≠ch ·∫£nh --------------------
def _img_to_b64(img: Image.Image, fmt="PNG") -> str:
    buf = BytesIO()
    img.save(buf, format=fmt)
    return base64.b64encode(buf.getvalue()).decode("utf-8")

def _b64_to_img(b64: str) -> Image.Image:
    return Image.open(BytesIO(base64.b64decode(b64)))

# -------------------- B·ªô nh·ªõ h·ªôi tho·∫°i --------------------
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán, tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu."}
    ]

# Hi·ªÉn th·ªã h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥
for m in st.session_state.messages:
    if m["role"] == "system":
        continue
    with st.chat_message(m["role"]):
        if isinstance(m["content"], dict):
            st.markdown(m["content"].get("text", ""))
            if m["content"].get("image_b64"):
                st.image(_b64_to_img(m["content"]["image_b64"]), caption="·∫¢nh ƒë√≠nh k√®m", use_column_width=True)
        else:
            st.markdown(m["content"])

# -------------------- √î nh·∫≠p li·ªáu --------------------
st.markdown("### üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")
attach_cam = st.camera_input("üì∏ Ch·ª•p ·∫£nh (t√πy ch·ªçn)")
attach_file = st.file_uploader("üìé Ho·∫∑c t·∫£i ·∫£nh t·ª´ m√°y", type=["png", "jpg", "jpeg"], key="upload")

attached_b64 = None
mime_type = None
if attach_cam:
    attached_b64 = base64.b64encode(attach_cam.getvalue()).decode("utf-8")
    mime_type = "image/png"
elif attach_file:
    attached_b64 = base64.b64encode(attach_file.getvalue()).decode("utf-8")
    mime_type = attach_file.type or "image/png"

prompt = st.chat_input("Nh·∫≠p tin nh·∫Øn...")

# -------------------- G·ª≠i c√¢u h·ªèi --------------------
if prompt:
    # L∆∞u tin nh·∫Øn user
    if attached_b64:
        user_msg = {"text": prompt, "image_b64": attached_b64}
    else:
        user_msg = prompt

    st.session_state.messages.append({"role": "user", "content": user_msg})

    with st.chat_message("user"):
        st.markdown(prompt)
        if attached_b64:
            st.image(_b64_to_img(attached_b64), caption="·∫¢nh b·∫°n g·ª≠i", use_column_width=True)

    with st.chat_message("assistant"):
        try:
            if attached_b64:
                # ===== C√≥ ·∫£nh ‚Üí d√πng Responses API =====
                content_blocks = [
                    {"type": "text", "text": prompt},
                    {"type": "input_image", "image_data": attached_b64, "mime_type": mime_type},
                ]
                resp = client.responses.create(
                    model=model,
                    input=[
                        {"role": "system", "content": [{"type": "text", "text": "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, hi·ªÉu c·∫£ vƒÉn b·∫£n v√† h√¨nh ·∫£nh."}]},
                        {"role": "user", "content": content_blocks},
                    ],
                    temperature=temperature,
                    max_output_tokens=max_tokens,
                )
                answer = resp.output_text
            else:
                # ===== Kh√¥ng ·∫£nh ‚Üí Chat Completions API =====
                msgs = [{"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán, gi√∫p ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu."}]
                for m in st.session_state.messages:
                    if m["role"] == "system":
                        continue
                    if isinstance(m["content"], dict):
                        txt = m["content"].get("text", "")
                    else:
                        txt = m["content"]
                    msgs.append({"role": m["role"], "content": txt})

                resp = client.chat.completions.create(
                    model=model,
                    messages=msgs,
                    temperature=temperature,
                    max_tokens=max_tokens,
                )
                answer = resp.choices[0].message.content

            st.markdown(answer)
            st.session_state.messages.append({"role": "assistant", "content": answer})

        except Exception as e:
            st.error(f"L·ªói khi g·ªçi OpenAI API: {e}")
