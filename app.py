import os
import streamlit as st
from openai import OpenAI

# -------------------- C·∫•u h√¨nh trang --------------------
st.set_page_config(page_title="Chat v·ªõi OpenAI", page_icon="üí¨", layout="centered")
st.title("üí¨ Chat v·ªõi OpenAI (s·∫£n ph·∫©m c·ªßa DuyKh√°nh, Qu·ªëcHo√†ng, B√© H∆∞uNh√¢n)")
st.caption("üí° Tr·ª£ l√Ω AI th√¢n thi·ªán, tr√≤ chuy·ªán b·∫±ng ti·∫øng Vi·ªát ‚Ä¢ Model m·∫∑c ƒë·ªãnh: gpt-4o-mini")

# -------------------- L·∫•y API key --------------------
api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùå Thi·∫øu OPENAI_API_KEY. V√†o **Settings ‚Üí Secrets** c·ªßa Streamlit Cloud ƒë·ªÉ th√™m.")
    st.stop()

client = OpenAI(api_key=api_key)

# -------------------- Sidebar --------------------
with st.sidebar:
    st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
    model = st.selectbox("Ch·ªçn model", ["gpt-4o-mini", "gpt-4o", "o4-mini"], index=0)
    temperature = st.slider("Nhi·ªát ƒë·ªô (Temperature)", 0.0, 1.0, 0.3, 0.1)
    max_tokens = st.slider("S·ªë token t·ªëi ƒëa", 64, 2048, 512, 64)
    st.caption("üí¨ Nhi·ªát ƒë·ªô th·∫•p ‚Üí tr·∫£ l·ªùi ·ªïn ƒë·ªãnh h∆°n")

# -------------------- B·ªô nh·ªõ h·ªôi tho·∫°i --------------------
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, b·∫±ng ti·∫øng Vi·ªát."}
    ]

# -------------------- Hi·ªÉn th·ªã h·ªôi tho·∫°i c≈© --------------------
for m in st.session_state.messages:
    if m["role"] == "system":
        continue
    with st.chat_message(m["role"]):
        st.markdown(m["content"])

# -------------------- √î nh·∫≠p li·ªáu --------------------
prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c tin nh·∫Øn c·ªßa b·∫°n...")

# -------------------- G·ª≠i v√† nh·∫≠n ph·∫£n h·ªìi --------------------
if prompt:
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        try:
            # G·ªçi API OpenAI
            resp = client.chat.completions.create(
                model=model,
                messages=st.session_state.messages,
                temperature=temperature,
                max_tokens=max_tokens,
            )
            answer = resp.choices[0].message.content
            st.markdown(answer)
            # L∆∞u c√¢u tr·∫£ l·ªùi
            st.session_state.messages.append({"role": "assistant", "content": answer})
        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói khi g·ªçi OpenAI API: {e}")
